function tutorial_visual_single(tutorial_dir)
% TUTORIAL_VISUAL_SINGLE: Script that runs the Brainstorm/SPM group analysis pipeline (single subject).
%
% ONLINE TUTORIALS: http://neuroimage.usc.edu/brainstorm/Tutorials/VisualSingle
%
% INPUTS: tutorial_dir: Directory containing the folder sample_group.
%
% tutorial_dir:
%    |- sample_group
%        |- SubXX/MEEG/*_sss.fif : Downloaded from ftp://ftp.mrc-cbu.cam.ac.uk/personal/rik.henson/wakemandg_hensonrn/
%        |- SubXX/MEEG/Trials/*  : Same
%        |- EmptyRoom            : Same
%        |- Anatomy              : Downloaded from the Brainstorm website (sample_group_anat.zip) and unzipped

% @=============================================================================
% This function is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2016 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2015


% ===== SCRIPT VARIABLES =====
% Full list of subjects to process
SubjectNames = {'Sub01', 'Sub02', 'Sub03', 'Sub04', 'Sub05', 'Sub06', 'Sub07', 'Sub08', 'Sub09', 'Sub10', 'Sub11', 'Sub12', 'Sub13', 'Sub14', 'Sub15', 'Sub16'};
% Bad channels {iSubj} = {Run01, Run02, Run03, Run04, Run05, Run06}
BadChannels{1}   = {'EEG016', 'EEG016', 'EEG016', 'EEG016', 'EEG016', 'EEG016'};
BadChannels{2}   = {'', '', '', '', '', ''};
BadChannels{3}   = {'', '', '', '', '', ''};
BadChannels{4}   = {'', '', '', '', '', ''};
BadChannels{5}   = {'', '', '', '', '', ''};
BadChannels{6}   = {'', '', '', '', '', ''};
BadChannels{7}   = {'', '', '', '', '', ''};
BadChannels{8}   = {'', '', '', '', '', ''};
BadChannels{9}   = {'', '', '', '', '', ''};
BadChannels{10}  = {'', '', '', '', '', ''};
BadChannels{11}  = {'', '', '', '', '', ''};
BadChannels{12}  = {'', '', '', '', '', ''};
BadChannels{13}  = {'', '', '', '', '', ''};
BadChannels{14}  = {'', '', '', '', '', ''};
BadChannels{15}  = {'', '', '', '', '', ''};
BadChannels{16}  = {'', '', '', '', '', ''};
% SSP components to remove {iSubj} = {sRun01, sRun02, sRun03, sRun03, sRun04, sRun05, sRun06}
sDefault = struct('ECG_GRAD', 1, 'ECG_MAG', 1, 'EOG_GRAD', 1, 'EOG_MAG', 1, 'EOG_EEG', 1);
SspSelect{1}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault}; 
SspSelect{2}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{3}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{4}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{5}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{6}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{7}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{8}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{9}  = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{10} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{11} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{12} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{13} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{14} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{15} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};
SspSelect{16} = {sDefault, sDefault, sDefault, sDefault, sDefault, sDefault};


% ===== CREATE PROTOCOL =====
% You have to specify the folder in which the tutorial dataset is unzipped
if (nargin == 0) || isempty(tutorial_dir) || ~file_exist(tutorial_dir)
    error('The first argument must be the full path to the tutorial folder.');
end
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialVisual';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);


% ===== LOOP ON SUBJECTS =====
for iSubj = [2]
    % Start a new report
    bst_report('Start');
    
    % ===== FILES TO IMPORT =====
    % Subject name
    SubjectNames{1} = 'Sub02';
    % Build the path of the files to import
    AnatDir    = fullfile(tutorial_dir, 'sample_group', 'Anatomy', SubjectNames{iSubj});
    DataDir    = fullfile(tutorial_dir, 'sample_group', SubjectNames{iSubj}, 'MEEG');
    NoiseFile  = fullfile(tutorial_dir, 'sample_group', 'EmptyRoom', '090430', '090430.fif');
    % Check if the folder contains the required files
    if ~file_exist(AnatDir)
        error(['The folder "' AnatDir '" does not exist.']);
    end
    if ~file_exist(DataDir)
        error(['The folder "' DataDir '" does not exist.']);
    end

    % ===== ANATOMY =====
    % Process: Import anatomy folder
    bst_process('CallProcess', 'process_import_anatomy', [], [], ...
        'subjectname', SubjectNames{iSubj}, ...
        'mrifile', {AnatDir, 'FreeSurfer'}, ...
        'nvertices', 15000);


    % ===== PROCESS EACH RUN =====
    for iRun = 1:1
        % Files to import
        FifFile   = bst_fullfile(DataDir, sprintf('run_%02d_sss.fif', iRun));
        EventFile = bst_fullfile(DataDir, 'Trials', sprintf('run_%02d_trldef.txt', iRun));

        % ===== LINK CONTINUOUS FILE =====
        % Process: Create link to raw file
        sFileRaw = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
            'subjectname',    SubjectNames{iSubj}, ...
            'datafile',       {FifFile, 'FIF'}, ...
            'channelreplace', 1, ...
            'channelalign',   0);

        % ===== PREPARE CHANNEL FILE =====
        % Process: Set channels type
        bst_process('CallProcess', 'process_channel_settype', sFileRaw, [], ...
            'sensortypes', 'EEG061, EEG064', ...
            'newtype',     'NOSIG');
        bst_process('CallProcess', 'process_channel_settype', sFileRaw, [], ...
            'sensortypes', 'EEG062', ...
            'newtype',     'EOG');
        bst_process('CallProcess', 'process_channel_settype', sFileRaw, [], ...
            'sensortypes', 'EEG063', ...
            'newtype',     'ECG');

        % Process: Remove head points
        sFileRaw = bst_process('CallProcess', 'process_headpoints_remove', sFileRaw, [], ...
            'zlimit', 0);
        % Process: Refine registration
        sFileRaw = bst_process('CallProcess', 'process_headpoints_refine', sFileRaw, []);
        % Process: Project electrodes on scalp
        sFileRaw = bst_process('CallProcess', 'process_channel_project', sFileRaw, []);

        % Process: Snapshot: Sensors/MRI registration
        bst_process('CallProcess', 'process_snapshot', sFileRaw, [], ...
            'target',   1, ...  % Sensors/MRI registration
            'modality', 1, ...  % MEG (All)
            'orient',   1, ...  % left
            'comment',  'EEG/MRI Registration');
        bst_process('CallProcess', 'process_snapshot', sFileRaw, [], ...
            'target',   1, ...  % Sensors/MRI registration
            'modality', 4, ...  % EEG
            'orient',   1, ...  % left
            'comment',  'EEG/MRI Registration');

        % ===== IMPORT TRIGGERS =====
        % Process: Import from file
        bst_process('CallProcess', 'process_evt_import', sFileRaw, [], ...
            'evtfile', {EventFile, 'TRL'}, ...
            'evtname', '');
        
        
        % ===== FREQUENCY FILTERS =====
        % Process: Power spectrum density (Welch)
        sFilePsd = bst_process('CallProcess', 'process_psd', sFileRaw, [], ...
            'timewindow',  [], ...
            'win_length',  4, ...
            'win_overlap', 50, ...
            'sensortypes', 'MEG, EEG', ...
            'edit', struct(...
                 'Comment',         'Power', ...
                 'TimeBands',       [], ...
                 'Freqs',           [], ...
                 'ClusterFuncTime', 'none', ...
                 'Measure',         'power', ...
                 'Output',          'all', ...
                 'SaveKernel',      0));
        % Process: Snapshot: Frequency spectrum
        bst_process('CallProcess', 'process_snapshot', sFilePsd, [], ...
            'target',   10, ...  % Frequency spectrum
            'comment',  'Power spectrum (before)');
        % Process: Notch filter: 50Hz 100Hz 150Hz 200Hz
        sFileClean = bst_process('CallProcess', 'process_notch', sFileRaw, [], ...
            'freqlist',    [50, 100, 150, 200], ...
            'sensortypes', 'MEG, EEG', ...
            'read_all',    0);
        % Process: Power spectrum density (Welch)
        sFilePsd = bst_process('CallProcess', 'process_psd', sFileClean, [], ...
            'timewindow',  [], ...
            'win_length',  4, ...
            'win_overlap', 50, ...
            'sensortypes', 'MEG, EEG', ...
            'edit', struct(...
                 'Comment',         'Power', ...
                 'TimeBands',       [], ...
                 'Freqs',           [], ...
                 'ClusterFuncTime', 'none', ...
                 'Measure',         'power', ...
                 'Output',          'all', ...
                 'SaveKernel',      0));
        % Process: Snapshot: Frequency spectrum
        bst_process('CallProcess', 'process_snapshot', sFilePsd, [], ...
            'target',   10, ...  % Frequency spectrum
            'comment',  'Power spectrum (after)');

        
        % ===== BAD CHANNELS =====
        if ~isempty(BadChannels{iSubj}{iRun})
            % Process: Set bad channels
            bst_process('CallProcess', 'process_channel_setbad', sFileClean, [], ...
                'sensortypes', BadChannels{iSubj}{iRun});
        end

        % ===== EEG REFERENCE =====
        % Process: Re-reference EEG
        bst_process('CallProcess', 'process_eegref', sFileClean, [], ...
            'eegref',      'AVERAGE', ...
            'sensortypes', 'EEG');

        
        % ===== DETECT ARTIFACTS ======
        % Process: Detect heartbeats
        bst_process('CallProcess', 'process_evt_detect_ecg', sFileClean, [], ...
            'channelname', 'EEG063', ...
            'timewindow',  [], ...
            'eventname',   'cardiac');
        % Process: Detect eye blinks
        bst_process('CallProcess', 'process_evt_detect_eog', sFileClean, [], ...
            'channelname', 'EEG062', ...
            'timewindow',  [], ...
            'eventname',   'blink');
        % Process: Remove simultaneous
        bst_process('CallProcess', 'process_evt_remove_simult', sFileClean, [], ...
            'remove', 'cardiac', ...
            'target', 'blink', ...
            'dt',     0.25, ...
            'rename', 0);
        

        % ===== SSP COMPUTATION =====
        % Process: SSP ECG: cardiac
        bst_process('CallProcess', 'process_ssp_ecg', sFileClean, [], ...
            'eventname',   'cardiac', ...
            'sensortypes', 'MEG GRAD', ...
            'usessp',      1, ...
            'select',      SspSelect{iSubj}{iRun}.ECG_GRAD);
        bst_process('CallProcess', 'process_ssp_ecg', sFileClean, [], ...
            'eventname',   'cardiac', ...
            'sensortypes', 'MEG MAG', ...
            'usessp',      1, ...
            'select',      SspSelect{iSubj}{iRun}.ECG_MAG);
        % Process: SSP EOG: blink
        bst_process('CallProcess', 'process_ssp_eog', sFileClean, [], ...
            'eventname',   'blink', ...
            'sensortypes', 'MEG GRAD', ...
            'usessp',      1, ...
            'select',      SspSelect{iSubj}{iRun}.EOG_GRAD);  
        bst_process('CallProcess', 'process_ssp_eog', sFileClean, [], ...
            'eventname',   'blink', ...
            'sensortypes', 'MEG MAG', ...
            'usessp',      1, ...
            'select',      SspSelect{iSubj}{iRun}.EOG_MAG);  
        bst_process('CallProcess', 'process_ssp_eog', sFileClean, [], ...
            'eventname',   'blink', ...
            'sensortypes', 'EEG', ...
            'usessp',      1, ...
            'select',      SspSelect{iSubj}{iRun}.EOG_EEG);  
        % Process: Snapshot: SSP projectors
        bst_process('CallProcess', 'process_snapshot', sFileClean, [], ...
            'target',   2);   % SSP projectors

        
        % ===== IMPORT EVENTS ======
        % Process: Import MEG/EEG: Events
        sFileEpochs = bst_process('CallProcess', 'process_import_data_event', sFileClean, [], ...
            'subjectname',  SubjectNames{iSubj}, ...
            'condition',    '', ...
            'eventname',    'Famous, Scrambled, Unfamiliar', ...
            'timewindow',   [], ...
            'epochtime',    [-0.5, 1.2], ...
            'createcond',   0, ...
            'ignoreshort',  1, ...
            'usectfcomp',   1, ...
            'usessp',       1, ...
            'freq',         [], ...
            'baseline',     [-0.5, -0.001]);        
          
        % ===== AVERAGE RECORDINGS =====
        % Process: Average: By trial group (subject average)
        sFileAvg = bst_process('CallProcess', 'process_average', sFileEpochs, [], ...
            'avgtype',    6, ...
            'avg_func',   1, ...  % Arithmetic average: mean(x)
            'keepevents', 1);
        % Process: Snapshot: Recordings time series
        bst_process('CallProcess', 'process_snapshot', sFileAvg, [], ...
            'target',   5, ...  % Recordings time series
            'modality', 1, ...  % MEG (All)
            'comment',  'MEG evoked response');
        bst_process('CallProcess', 'process_snapshot', sFileAvg, [], ...
            'target',   5, ...  % Recordings time series
            'modality', 4, ...  % EEG
            'comment',  'EEG evoked response');
        
        % Process: Snapshot: Recordings topography (contact sheet)
        bst_process('CallProcess', 'process_snapshot', sFileAvg, [], ...
            'target',   7, ...  % Recordings topography (contact sheet)
            'modality', 1, ...  % MEG (all)
            'contact_time',   [0, 0.500], ...
            'contact_nimage', 15, ...
            'comment',  'MEG evoked response');
        bst_process('CallProcess', 'process_snapshot', sFileAvg, [], ...
            'target',   7, ...  % Recordings topography (contact sheet)
            'modality', 4, ...  % EEG
            'contact_time',   [0, 0.500], ...
            'contact_nimage', 15, ...
            'comment',  'MEG evoked response');
    end

    % Save and display report
    ReportFile{iSubj} = bst_report('Save', sFileAvg);
    bst_report('Open', ReportFile{iSubj});
end




