function tutorial_yokogawa(tutorial_dir)
% TUTORIAL_YOKOGAWA: Script that reproduces the results of the online tutorials "Yokogawa recordings".
%
% CORRESPONDING ONLINE TUTORIALS:
%     http://neuroimage.usc.edu/brainstorm/Tutorials/Yokogawa
%
% INPUTS: 
%     tutorial_dir: Directory where the sample_yokogawa.zip file has been unzipped

% @=============================================================================
% This function is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2016 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2014


% ======= FILES TO IMPORT =======
% You have to specify the folder in which the tutorial dataset is unzipped
if (nargin == 0) || isempty(tutorial_dir) || ~file_exist(tutorial_dir)
    error('The first argument must be the full path to the tutorial dataset folder.');
end
% Build the path of the files to import
AnatDir = fullfile(tutorial_dir, 'sample_yokogawa', 'anatomy');
RawFile = fullfile(tutorial_dir, 'sample_yokogawa', 'data', 'SEF_000-export.con');
% Check if the folder contains the required files
if ~file_exist(RawFile)
    error(['The folder ' tutorial_dir ' does not contain the folder from the file sample_yokogawa.zip.']);
end

% ======= CREATE PROTOCOL =======
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialYokogawa';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
% Start a new report
bst_report('Start');


% ===== ANATOMY =====
% Subject name
SubjectName = 'Subject01';
% Process: Import anatomy folder
bst_process('CallProcess', 'process_import_anatomy', [], [], ...
    'subjectname', SubjectName, ...
    'mrifile',     {AnatDir, 'FreeSurfer'}, ...
    'nvertices',   15000, ...
    'nas', [128, 227,  93], ...
    'lpa', [ 48, 130,  69], ...
    'rpa', [214, 130,  76], ...
    'ac',  [128, 148, 116], ...
    'pc',  [128, 123, 117], ...
    'ih',  [128, 131, 176]);

% Process: Generate BEM surfaces
bst_process('CallProcess', 'process_generate_bem', [], [], ...
    'subjectname', SubjectName, ...
    'nscalp',      1922, ...
    'nouter',      1922, ...
    'ninner',      1922, ...
    'thickness',   4);

% ===== LINK CONTINUOUS FILE =====
% Process: Create link to raw file
sFilesRaw = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectName, ...
    'datafile',       {RawFile, 'KIT'}, ...
    'channelreplace', 0, ...
    'channelalign',   0);

% Process: Set channels types
bst_process('CallProcess', 'process_channel_settype', sFilesRaw, [], ...
    'sensortypes', 'EO1, EO2', ...
    'newtype',     'EOG');
bst_process('CallProcess', 'process_channel_settype', sFilesRaw, [], ...
    'sensortypes', 'EKG+', ...
    'newtype',     'ECG');
bst_process('CallProcess', 'process_channel_settype', sFilesRaw, [], ...
    'sensortypes', 'E', ...
    'newtype',     'MISC');

% Process: Events: Read from channel
bst_process('CallProcess', 'process_evt_read', sFilesRaw, [], ...
    'stimchan',  'Trigger01', ...
    'trackmode', 3, ...  % TTL: detect peaks of 5V/12V on an analog channel (baseline=0V)
    'zero',      0);

% Process: Snapshot: Sensors/MRI registration
bst_process('CallProcess', 'process_snapshot', sFilesRaw, [], ...
    'target',   1, ...  % Sensors/MRI registration
    'modality', 1, ...  % MEG (All)
    'orient',   1, ...  % left
    'comment',  'MEG/MRI Registration');

% Process: Snapshot: Sensors/MRI registration
bst_process('CallProcess', 'process_snapshot', sFilesRaw, [], ...
    'target',   1, ...  % Sensors/MRI registration
    'modality', 4, ...  % EEG
    'orient',   1, ...  % left
    'comment',  'EEG/MRI Registration');


% ===== EVALUATION 60/180/240 Hz =====
% Process: Power spectrum density (Welch)
sFilesPsd = bst_process('CallProcess', 'process_psd', sFilesRaw, [], ...
    'timewindow',  [0, 50], ...
    'win_length',  4, ...
    'win_overlap', 50, ...
    'clusters',    {}, ...
    'sensortypes', 'MEG, EEG', ...
    'edit', struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));
     
% Process: Snapshot: Frequency spectrum
bst_process('CallProcess', 'process_snapshot', sFilesPsd, [], ...
    'target',   10, ...  % Frequency spectrum
    'comment',  'Power spectrum density');


% ===== CORRECT BLINKS AND HEARTBEATS =====
% Process: Detect heartbeats
sFilesRaw = bst_process('CallProcess', 'process_evt_detect_ecg', sFilesRaw, [], ...
    'channelname', 'EKG+', ...
    'timewindow',  [], ...
    'eventname',   'cardiac');

% Process: Detect eye blinks
sFilesRaw = bst_process('CallProcess', 'process_evt_detect_eog', sFilesRaw, [], ...
    'channelname', 'EO2', ...
    'timewindow',  [], ...
    'eventname',   'blink');

% % Process: Remove simultaneous
% sFilesRaw = bst_process('CallProcess', 'process_evt_remove_simult', sFilesRaw, [], ...
%     'remove', 'cardiac', ...
%     'target', 'blink', ...
%     'dt',     0.25, ...
%     'rename', 0);

% Process: SSP EOG: blink (MEG and EEG)
sFilesRaw = bst_process('CallProcess', 'process_ssp_eog', sFilesRaw, [], ...
    'eventname',   'blink', ...
    'sensortypes', 'MEG', ...
    'usessp',       1, ...
    'select',       1);
sFilesRaw = bst_process('CallProcess', 'process_ssp_eog', sFilesRaw, [], ...
    'eventname',   'blink', ...
    'sensortypes', 'EEG', ...
    'usessp',       1, ...
    'select',       1);

% Process: SSP ECG: cardiac (MEG and EEG)
sFilesRaw = bst_process('CallProcess', 'process_ssp_ecg', sFilesRaw, [], ...
    'eventname',   'cardiac', ...
    'sensortypes', 'MEG', ...
    'usessp',       1, ...
    'select',       1);
sFilesRaw = bst_process('CallProcess', 'process_ssp_ecg', sFilesRaw, [], ...
    'eventname',   'cardiac', ...
    'sensortypes', 'EEG', ...
    'usessp',       1, ...
    'select',       1);

% Process: Snapshot: SSP projectors
bst_process('CallProcess', 'process_snapshot', sFilesRaw, [], ...
    'target',  2, ...  % SSP projectors
    'comment', 'SSP projectors');

% Mark bad channels
tree_set_channelflag(sFilesRaw.FileName, 'AddBad', 'LC11, TP9');


% ===== IMPORT EVENTS =====
% Process: Import MEG/EEG: Events
sFilesEpochs = bst_process('CallProcess', 'process_import_data_event', sFilesRaw, [], ...
    'subjectname', SubjectName, ...
    'condition',   '', ...
    'eventname',   'Trigger01', ...
    'timewindow',  [], ...
    'epochtime',   [-0.050, 0.250], ...
    'createcond',  1, ...
    'ignoreshort', 1, ...
    'usectfcomp',  1, ...
    'usessp',      1, ...
    'freq',        [], ...
    'baseline',    [-0.050, -0.010]);

% Process: Average: By condition (subject average)
sFilesAvg = bst_process('CallProcess', 'process_average', sFilesEpochs, [], ...
    'avgtype',    3, ...
    'avg_func',   1, ...  % Arithmetic average: mean(x)
    'keepevents', 0);

% Process: Cut stimulation artifact: [0ms,4ms]
sFilesAvg = bst_process('CallProcess', 'process_cutstim', sFilesAvg, [], ...
    'timewindow',  [-0.0005, 0.0025], ...
    'sensortypes', 'MEG, EEG', ...
    'overwrite',   1);

% Process: Snapshot: Recordings time series (MEG + EEG)
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',   5, ...  % Recordings time series
    'modality', 1, ...  % MEG (All)
    'comment',  'Evoked response (MEG)');
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',   5, ...  % Recordings time series
    'modality', 4, ...  % EEG
    'comment',  'Evoked response (EEG)');

% Process: Snapshot: Recordings topography (one time, MEG + EEG)
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',   6, ...  % Recordings topography (one time)
    'modality', 1, ...  % MEG (All)
    'orient',   1, ...  % left
    'time',     0.0185, ...
    'comment', 'Evoked response (MEG topography)');
bst_process('CallProcess', 'process_snapshot', sFilesAvg, [], ...
    'target',   6, ...  % Recordings topography (one time)
    'modality', 4, ...  % EEG
    'orient',   1, ...  % left
    'time',     0.0185, ...
    'comment', 'Evoked response (EEG topography)');


% ===== SOURCE MODELING =====
% Process: Compute head model
bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
    'comment', '', ...
    'sourcespace', 1, ...
    'meg',  3, ...  % Overlapping spheres
    'eeg',  3, ...  % OpenMEEG BEM
    'openmeeg', struct(...
         'BemSelect',    [1, 1, 1], ...
         'BemCond',      [1, 0.0125, 1], ...
         'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemFiles',     {{}}, ...
         'isAdjoint',    1, ...
         'isAdaptative', 1, ...
         'isSplit',      0, ...
         'SplitLength',  4000));

% Process: Compute noise covariance
bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
    'baseline', [-0.050, -0.010], ...
    'dcoffset', 1, ...
    'method',   1, ...  % Full noise covariance matrix
    'copycond', 0, ...
    'copysubj', 0);

% Process: Snapshot: Noise covariance
bst_process('CallProcess', 'process_snapshot', sFilesEpochs, [], ...
    'target',  3, ...  % Noise covariance
    'comment', 'Noise covariance');

% Process: Compute sources (MEG)
sFilesSrcMeg = bst_process('CallProcess', 'process_inverse', sFilesAvg, [], ...
    'comment', '', ...
    'method',  1, ...  % Minimum norm estimates (wMNE)
    'wmne',    struct(...
         'NoiseCov',      [], ...
         'InverseMethod', 'wmne', ...
         'ChannelTypes',  {{}}, ...
         'SNR',           3, ...
         'diagnoise',     0, ...
         'SourceOrient',  {{'fixed'}}, ...
         'loose',         0.2, ...
         'depth',         1, ...
         'weightexp',     0.5, ...
         'weightlimit',   10, ...
         'regnoise',      1, ...
         'magreg',        0.1, ...
         'gradreg',       0.1, ...
         'eegreg',        0.1, ...
         'ecogreg',       0.1, ...
         'seegreg',       0.1, ...
         'fMRI',          [], ...
         'fMRIthresh',    [], ...
         'fMRIoff',       0.1, ...
         'pca',           1), ...
    'sensortypes', 'MEG', ...
    'output',      1);  % Kernel only: shared

% Process: Compute sources (EEG)
sFilesSrcEeg = bst_process('CallProcess', 'process_inverse', sFilesAvg, [], ...
    'comment', '', ...
    'method',  1, ...  % Minimum norm estimates (wMNE)
    'wmne',    struct(...
         'NoiseCov',      [], ...
         'InverseMethod', 'wmne', ...
         'ChannelTypes',  {{}}, ...
         'SNR',           3, ...
         'diagnoise',     0, ...
         'SourceOrient',  {{'fixed'}}, ...
         'loose',         0.2, ...
         'depth',         1, ...
         'weightexp',     0.5, ...
         'weightlimit',   10, ...
         'regnoise',      1, ...
         'magreg',        0.1, ...
         'gradreg',       0.1, ...
         'eegreg',        0.1, ...
         'ecogreg',       0.1, ...
         'seegreg',       0.1, ...
         'fMRI',          [], ...
         'fMRIthresh',    [], ...
         'fMRIoff',       0.1, ...
         'pca',           1), ...
    'sensortypes', 'EEG', ...
    'output',      1);  % Kernel only: shared

% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sFilesSrcMeg, [], ...
    'target',   8, ...  % Sources (one time)
    'orient',   3, ...  % top
    'time',     0.020, ...
    'comment',  'Source maps at 20ms (MEG)');
bst_process('CallProcess', 'process_snapshot', sFilesSrcEeg, [], ...
    'target',   8, ...  % Sources (one time)
    'orient',   3, ...  % top
    'time',     0.020, ...
    'comment',  'Source maps at 20ms (EEG)');


% ===== Z-SCORE =====
% Process: Z-score normalization: [120.000s,130.000s]
sFilesZscore = bst_process('CallProcess', 'process_zscore_dynamic', [sFilesSrcMeg, sFilesSrcEeg], [], ...
    'baseline',   [-0.050, -0.010], ...
    'source_abs', 1);

% Process: Snapshot: Sources (one time)
bst_process('CallProcess', 'process_snapshot', sFilesZscore(1), [], ...
    'target',   8, ...  % Sources (one time)
    'orient',   3, ...  % top
    'time',     0.020, ...
    'comment',  'Z-score maps at 20ms (MEG)');
bst_process('CallProcess', 'process_snapshot', sFilesZscore(2), [], ...
    'target',   8, ...  % Sources (one time)
    'orient',   3, ...  % top
    'time',     0.020, ...
    'comment',  'Z-score maps at 20ms (EEG)');


% Save and display report
ReportFile = bst_report('Save', sFilesZscore);
bst_report('Open', ReportFile);



